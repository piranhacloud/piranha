name: build
on: 
  push:
    branches:
      - '*'
    tags-ignore:
      - 'v*'
  pull_request:
    branches:
      - '*'  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java: [ '17', '19' ]
        os: [ubuntu-latest, windows-latest]
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v3
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        cache: 'maven'
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
    - name: Build with Maven
      run: mvn --no-transfer-progress -B install
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: ${{ runner.os != 'Windows' }}
      with:
        files: '**/target/surefire-reports/*.xml'     
  codeql:
    name: codeql
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: 'java'
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        cache: 'maven'
        distribution: 'temurin'
        java-version: '17'
    - name: Build with Maven
      run: mvn -B -DskipTests=true -DskipITs=true --ntp install
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
  dockerhub:
    if: github.repository == 'piranhacloud/piranha' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: 'maven'
        distribution: 'temurin'
        java-version: 17
    - name: Build with Maven
      run: mvn -B -DskipTests=true -DskipITs=true -ntp -P '!test' verify
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: v0.10.0
    - run: docker buildx inspect
    - name: Build Piranha Core Profile image
      run: |
        cd dist/coreprofile
        export DOCKER_CLI_EXPERIMENTAL=enabled
        docker buildx build --load --platform linux/amd64 -f Dockerfile.amd64 -t piranhacloud/coreprofile:amd64-latest .
        docker push piranhacloud/coreprofile:amd64-latest
        docker buildx build --load --platform linux/arm64 -f Dockerfile.arm64v8 -t piranhacloud/coreprofile:arm64v8-latest .
        docker push piranhacloud/coreprofile:arm64v8-latest
        docker manifest rm piranhacloud/coreprofile:latest || true
        docker manifest create piranhacloud/coreprofile:latest \
          piranhacloud/coreprofile:amd64-latest \
          piranhacloud/coreprofile:arm64v8-latest
        docker manifest annotate piranhacloud/coreprofile:latest \
          piranhacloud/coreprofile:amd64-latest --os linux --arch amd64
        docker manifest annotate piranhacloud/coreprofile:latest \
          piranhacloud/coreprofile:arm64v8-latest --os linux --arch arm64 --variant v8
        docker manifest push piranhacloud/coreprofile:latest
    - name: Build Piranha Micro image
      run: |
        cd dist/micro
        export DOCKER_CLI_EXPERIMENTAL=enabled
        docker buildx build --load --platform linux/amd64 -f Dockerfile.amd64 -t piranhacloud/micro:amd64-latest .
        docker push piranhacloud/micro:amd64-latest
        docker buildx build --load --platform linux/arm64 -f Dockerfile.arm64v8 -t piranhacloud/micro:arm64v8-latest .
        docker push piranhacloud/micro:arm64v8-latest
        docker manifest rm piranhacloud/micro:latest || true
        docker manifest create piranhacloud/micro:latest \
          piranhacloud/micro:amd64-latest \
          piranhacloud/micro:arm64v8-latest
        docker manifest annotate piranhacloud/micro:latest \
          piranhacloud/micro:amd64-latest --os linux --arch amd64
        docker manifest annotate piranhacloud/micro:latest \
          piranhacloud/micro:arm64v8-latest --os linux --arch arm64 --variant v8
        docker manifest push piranhacloud/micro:latest
    - name: Build Piranha Micro Profile image
      run: |
        cd dist/microprofile
        export DOCKER_CLI_EXPERIMENTAL=enabled
        docker buildx build --load --platform linux/amd64 -f Dockerfile.amd64 -t piranhacloud/microprofile:amd64-latest .
        docker push piranhacloud/microprofile:amd64-latest
        docker buildx build --load --platform linux/arm64 -f Dockerfile.arm64v8 -t piranhacloud/microprofile:arm64v8-latest .
        docker push piranhacloud/microprofile:arm64v8-latest
        docker manifest rm piranhacloud/microprofile:latest || true
        docker manifest create piranhacloud/microprofile:latest \
          piranhacloud/microprofile:amd64-latest \
          piranhacloud/microprofile:arm64v8-latest
        docker manifest annotate piranhacloud/microprofile:latest \
          piranhacloud/microprofile:amd64-latest --os linux --arch amd64
        docker manifest annotate piranhacloud/microprofile:latest \
          piranhacloud/microprofile:arm64v8-latest --os linux --arch arm64 --variant v8
        docker manifest push piranhacloud/microprofile:latest
    - name: Build Piranha Server image
      run: |
        cd dist/server
        export DOCKER_CLI_EXPERIMENTAL=enabled
        docker buildx build --load --platform linux/amd64 -f Dockerfile.amd64 -t piranhacloud/server:amd64-latest .
        docker push piranhacloud/server:amd64-latest
        docker buildx build --load --platform linux/arm64 -f Dockerfile.arm64v8 -t piranhacloud/server:arm64v8-latest .
        docker push piranhacloud/server:arm64v8-latest
        docker manifest rm piranhacloud/server:latest || true
        docker manifest create piranhacloud/server:latest \
          piranhacloud/server:amd64-latest \
          piranhacloud/server:arm64v8-latest
        docker manifest annotate piranhacloud/server:latest \
          piranhacloud/server:amd64-latest --os linux --arch amd64
        docker manifest annotate piranhacloud/server:latest \
          piranhacloud/server:arm64v8-latest --os linux --arch arm64 --variant v8
        docker manifest push piranhacloud/server:latest
    - name: Build Piranha Servlet image
      run: |
        cd dist/servlet
        export DOCKER_CLI_EXPERIMENTAL=enabled
        docker buildx build --load --platform linux/amd64 -f Dockerfile.amd64 -t piranhacloud/servlet:amd64-latest .
        docker push piranhacloud/servlet:amd64-latest
        docker buildx build --load --platform linux/arm64 -f Dockerfile.arm64v8 -t piranhacloud/servlet:arm64v8-latest .
        docker push piranhacloud/servlet:arm64v8-latest
        docker manifest rm piranhacloud/servlet:latest || true
        docker manifest create piranhacloud/servlet:latest \
          piranhacloud/servlet:amd64-latest \
          piranhacloud/servlet:arm64v8-latest
        docker manifest annotate piranhacloud/servlet:latest \
          piranhacloud/servlet:amd64-latest --os linux --arch amd64
        docker manifest annotate piranhacloud/servlet:latest \
          piranhacloud/servlet:arm64v8-latest --os linux --arch arm64 --variant v8
        docker manifest push piranhacloud/servlet:latest
    - name: Build Piranha Web Profile image
      run: |
        cd dist/webprofile
        export DOCKER_CLI_EXPERIMENTAL=enabled
        docker buildx build --load --platform linux/amd64 -f Dockerfile.amd64 -t piranhacloud/webprofile:amd64-latest .
        docker push piranhacloud/webprofile:amd64-latest
        docker buildx build --load --platform linux/arm64 -f Dockerfile.arm64v8 -t piranhacloud/webprofile:arm64v8-latest .
        docker push piranhacloud/webprofile:arm64v8-latest
        docker manifest rm piranhacloud/webprofile:latest || true
        docker manifest create piranhacloud/webprofile:latest \
          piranhacloud/webprofile:amd64-latest \
          piranhacloud/webprofile:arm64v8-latest
        docker manifest annotate piranhacloud/webprofile:latest \
          piranhacloud/webprofile:amd64-latest --os linux --arch amd64
        docker manifest annotate piranhacloud/webprofile:latest \
          piranhacloud/webprofile:arm64v8-latest --os linux --arch arm64 --variant v8
        docker manifest push piranhacloud/webprofile:latest
  early-access:
    if: github.repository == 'piranhacloud/piranha'
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        java: [ 'EA' ]
        os: [ubuntu-latest]
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v3
    - name: Setup Java ${{ matrix.java }}
      uses: oracle-actions/setup-java@v1
      with:
        website: jdk.java.net
        release: ${{ matrix.java }}
    - name: Build with Maven
      run: mvn -B --ntp install -Djacoco.skip=true
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: '**/target/surefire-reports/*.xml'
  sonarcloud:
    if: github.repository == 'piranhacloud/piranha' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        fetch-depth: 10
    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Analyze with SonarCloud
      run: |
        mvn -B -ntp install verify site \
        sonar:sonar -Dsonar.projectKey=piranhacloud_piranha \
        -Dsonar.organization=piranhacloud -Dsonar.host.url=https://sonarcloud.io
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  sonatype:
    if: github.repository == 'piranhacloud/piranha' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: 'maven'
        distribution: 'temurin'
        java-version: 17
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
    - name: Build with Maven
      run: mvn -B -DskipTests=true -P '!test' -ntp deploy
      env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
